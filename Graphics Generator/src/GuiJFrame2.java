import customTypes.Location;
import autoImporter.RobotOperator;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;
import com.formdev.flatlaf.themes.FlatMacDarkLaf;
import com.formdev.flatlaf.themes.FlatMacLightLaf;
import java.awt.AWTException;
import java.awt.Desktop;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import javax.swing.JFileChooser;
import graphicGenerator.GraphicGenerator;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import com.sun.jna.platform.win32.User32;
import com.sun.jna.platform.win32.WinDef.HWND;


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author wbdwy
 */
public class GuiJFrame2 extends javax.swing.JFrame {
    /**
     * Creates new form GuiJFrame2
     */
    public GuiJFrame2() {
        locations = new ArrayList<Location>(0);
        retrieveLocationInformation();
        if(this.locations.isEmpty())
            this.locations.add(new Location("default", 100, 100));        
        
        initComponents();
        
        // Updates the labels, if the folder and file isn't null
        if(this.bandInfoFile != null) this.labelSelectedTxtFile.setText("Selected .txt file: " + this.bandInfoFile.getName());
        if(this.graphicsSaveLocation != null) this.labelSaveGraphicsTo.setText("Save graphics to: \"" + this.graphicsSaveLocation.getName() + "\" folder");

        
        this.updateCombobox();   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        windowAddLocation = new javax.swing.JFrame();
        addLocationTextFieldName = new javax.swing.JTextField();
        addLocationLabelGraphicWidth = new javax.swing.JLabel();
        addLocationLabelGraphicHeight = new javax.swing.JLabel();
        addLocationTextFieldGraphicWidth = new javax.swing.JTextField();
        addLocationTextFieldGraphicHeight = new javax.swing.JTextField();
        addLocationButtonSave = new javax.swing.JButton();
        windowEditLocation = new javax.swing.JFrame();
        editLocationTextFieldName = new javax.swing.JTextField();
        editLocationLabeWidth = new javax.swing.JLabel();
        editLocationLabelHeight = new javax.swing.JLabel();
        editLocationTextFieldGraphicWidth = new javax.swing.JTextField();
        editLocationTextFieldGraphicHeight = new javax.swing.JTextField();
        editLocationButtonSave = new javax.swing.JButton();
        Footer = new javax.swing.JLabel();
        Tabs = new javax.swing.JTabbedPane();
        Main = new javax.swing.JPanel();
        buttonGenerateGraphics = new javax.swing.JButton();
        buttonImportGraphics = new javax.swing.JButton();
        buttonSaveGraphicsTo = new javax.swing.JButton();
        buttonSelectTxtFile = new javax.swing.JButton();
        buttonOpenTxtFile = new javax.swing.JButton();
        labelSaveGraphicsTo = new javax.swing.JLabel();
        labelSelectedTxtFile = new javax.swing.JLabel();
        buttonUnlockDrive = new javax.swing.JButton();
        buttonOpenIgnite = new javax.swing.JButton();
        seperatorHorizontal = new javax.swing.JSeparator();
        seperatorVertical = new javax.swing.JSeparator();
        seperatorVertical1 = new javax.swing.JSeparator();
        Location = new javax.swing.JPanel();
        locationLabelCurrentLocation = new javax.swing.JLabel();
        locationComboboxLocationSelector = new javax.swing.JComboBox<>();
        locationLabelGraphicWidth = new javax.swing.JLabel();
        locationLabelGraphicHeight = new javax.swing.JLabel();
        locationButtonAddLocation = new javax.swing.JButton();
        locationButtonRemoveCurrentLocation = new javax.swing.JButton();
        locationButtonEditCurrentLocation = new javax.swing.JButton();

        windowAddLocation.setTitle("Add Location");
        windowAddLocation.setMinimumSize(new java.awt.Dimension(190, 210));
        windowAddLocation.setResizable(false);

        addLocationTextFieldName.setText("Name");
        addLocationTextFieldName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLocationTextFieldNameActionPerformed(evt);
            }
        });

        addLocationLabelGraphicWidth.setText("Graphic width:");

        addLocationLabelGraphicHeight.setText("Graphic height:");

        addLocationTextFieldGraphicWidth.setText("100");
        addLocationTextFieldGraphicWidth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLocationTextFieldGraphicWidthActionPerformed(evt);
            }
        });

        addLocationTextFieldGraphicHeight.setText("100");
        addLocationTextFieldGraphicHeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLocationTextFieldGraphicHeightActionPerformed(evt);
            }
        });

        addLocationButtonSave.setText("Save");
        addLocationButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLocationButtonSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout windowAddLocationLayout = new javax.swing.GroupLayout(windowAddLocation.getContentPane());
        windowAddLocation.getContentPane().setLayout(windowAddLocationLayout);
        windowAddLocationLayout.setHorizontalGroup(
            windowAddLocationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(windowAddLocationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(windowAddLocationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addLocationTextFieldName)
                    .addGroup(windowAddLocationLayout.createSequentialGroup()
                        .addGroup(windowAddLocationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(addLocationLabelGraphicWidth, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addLocationLabelGraphicHeight, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(windowAddLocationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addLocationTextFieldGraphicWidth, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
                            .addComponent(addLocationTextFieldGraphicHeight))))
                .addContainerGap())
            .addGroup(windowAddLocationLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(addLocationButtonSave)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        windowAddLocationLayout.setVerticalGroup(
            windowAddLocationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(windowAddLocationLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addLocationTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(windowAddLocationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addLocationLabelGraphicWidth)
                    .addComponent(addLocationTextFieldGraphicWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(windowAddLocationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addLocationLabelGraphicHeight)
                    .addComponent(addLocationTextFieldGraphicHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(addLocationButtonSave)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        windowEditLocation.setTitle("Edit Location");
        windowEditLocation.setMinimumSize(new java.awt.Dimension(214, 210));
        windowEditLocation.setResizable(false);

        editLocationTextFieldName.setText("Name");
        editLocationTextFieldName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editLocationTextFieldNameActionPerformed(evt);
            }
        });

        editLocationLabeWidth.setText("New graphic width:");

        editLocationLabelHeight.setText("New graphic height:");

        editLocationTextFieldGraphicWidth.setText("10");
        editLocationTextFieldGraphicWidth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editLocationTextFieldGraphicWidthActionPerformed(evt);
            }
        });

        editLocationTextFieldGraphicHeight.setText("10");
        editLocationTextFieldGraphicHeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editLocationTextFieldGraphicHeightActionPerformed(evt);
            }
        });

        editLocationButtonSave.setText("Save");
        editLocationButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editLocationButtonSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout windowEditLocationLayout = new javax.swing.GroupLayout(windowEditLocation.getContentPane());
        windowEditLocation.getContentPane().setLayout(windowEditLocationLayout);
        windowEditLocationLayout.setHorizontalGroup(
            windowEditLocationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(windowEditLocationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(windowEditLocationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(editLocationTextFieldName)
                    .addGroup(windowEditLocationLayout.createSequentialGroup()
                        .addComponent(editLocationLabelHeight)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(editLocationTextFieldGraphicHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(windowEditLocationLayout.createSequentialGroup()
                        .addComponent(editLocationLabeWidth)
                        .addGap(18, 18, 18)
                        .addComponent(editLocationTextFieldGraphicWidth, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(windowEditLocationLayout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(editLocationButtonSave)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        windowEditLocationLayout.setVerticalGroup(
            windowEditLocationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(windowEditLocationLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editLocationTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(windowEditLocationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(editLocationLabeWidth)
                    .addComponent(editLocationTextFieldGraphicWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(windowEditLocationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editLocationLabelHeight)
                    .addComponent(editLocationTextFieldGraphicHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(editLocationButtonSave)
                .addContainerGap(61, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Graphics Generator");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        Footer.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Footer.setText("Current location: TODO FINISH THIS" +  "     ");
        Footer.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        BufferedImage imgGearIcon = null;
        try {
            imgGearIcon = ImageIO.read(new File("Images/Gear Icon.png"));
        } catch (IOException e) {
            e.printStackTrace();
        }
        Image dimgGearIcon = imgGearIcon.getScaledInstance(30, 30, Image.SCALE_SMOOTH);
        ImageIcon imageIconGearIcon = new ImageIcon(dimgGearIcon);
        buttonGenerateGraphics.setText("Generate graphics");
        buttonGenerateGraphics.setToolTipText("Generate the graphics into the selected folder");
        buttonGenerateGraphics.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonGenerateGraphics.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonGenerateGraphics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateGraphicsActionPerformed(evt);
            }
        });

        BufferedImage imgImportIcon = null;
        try {
            imgImportIcon = ImageIO.read(new File("Images/Play Icon.png"));
        } catch (IOException e) {
            e.printStackTrace();
        }
        Image dimgImportIcon = imgImportIcon.getScaledInstance(30, 30, Image.SCALE_SMOOTH);
        ImageIcon imageIconImportIcon = new ImageIcon(dimgImportIcon);
        buttonImportGraphics.setText("Import graphics");
        buttonImportGraphics.setToolTipText("Start the automatic importing of graphics into Ignite");
        buttonImportGraphics.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonImportGraphics.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonImportGraphics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonImportGraphicsActionPerformed(evt);
            }
        });

        buttonSaveGraphicsTo.setText("Save graphics to...");
        buttonSaveGraphicsTo.setToolTipText("Select the folder to save graphics to");
        buttonSaveGraphicsTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveGraphicsToActionPerformed(evt);
            }
        });

        buttonSelectTxtFile.setText("Select .txt file");
        buttonSelectTxtFile.setToolTipText("Select the .txt file containing the band information");
        buttonSelectTxtFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSelectTxtFileActionPerformed(evt);
            }
        });

        buttonOpenTxtFile.setText("Open selected .txt file");
        buttonOpenTxtFile.setToolTipText("Click here to open the selected .txt file");
        buttonOpenTxtFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOpenTxtFileActionPerformed(evt);
            }
        });

        labelSaveGraphicsTo.setText("Save graphics to: no location selected");

        labelSelectedTxtFile.setText("Selected .txt file: no file selected");

        buttonUnlockDrive.setText("Unlock Drive");
        buttonUnlockDrive.setToolTipText("Unlock the hard drive using WD Drive Unlocker");
        buttonUnlockDrive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUnlockDriveActionPerformed(evt);
            }
        });

        buttonOpenIgnite.setText("Open Ignite");
        buttonOpenIgnite.setToolTipText("Open the Ignite OPx software");
        buttonOpenIgnite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOpenIgniteActionPerformed(evt);
            }
        });

        seperatorVertical.setOrientation(javax.swing.SwingConstants.VERTICAL);

        seperatorVertical1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout MainLayout = new javax.swing.GroupLayout(Main);
        Main.setLayout(MainLayout);
        MainLayout.setHorizontalGroup(
            MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelSelectedTxtFile)
                    .addGroup(MainLayout.createSequentialGroup()
                        .addComponent(labelSaveGraphicsTo)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(MainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(seperatorHorizontal)
                    .addGroup(MainLayout.createSequentialGroup()
                        .addGroup(MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(MainLayout.createSequentialGroup()
                                .addGroup(MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(buttonGenerateGraphics, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(MainLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(buttonImportGraphics, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(7, 7, 7)
                                .addComponent(seperatorVertical1, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8)
                                .addGroup(MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(buttonSelectTxtFile, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(buttonSaveGraphicsTo, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(7, 7, 7)
                                .addComponent(seperatorVertical, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(buttonUnlockDrive, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(buttonOpenIgnite, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(buttonOpenTxtFile))
                        .addGap(0, 12, Short.MAX_VALUE)))
                .addContainerGap())
        );
        MainLayout.setVerticalGroup(
            MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(MainLayout.createSequentialGroup()
                            .addGroup(MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(buttonGenerateGraphics)
                                .addGroup(MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(buttonUnlockDrive)
                                    .addComponent(buttonSaveGraphicsTo)))
                            .addGap(18, 18, 18)
                            .addGroup(MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(buttonSelectTxtFile)
                                    .addComponent(buttonOpenIgnite))
                                .addComponent(buttonImportGraphics)))
                        .addComponent(seperatorVertical))
                    .addComponent(seperatorVertical1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(seperatorHorizontal, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(buttonOpenTxtFile)
                .addGap(18, 18, 18)
                .addComponent(labelSaveGraphicsTo)
                .addGap(18, 18, 18)
                .addComponent(labelSelectedTxtFile)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        Tabs.addTab("Main", Main);

        locationLabelCurrentLocation.setText("Current Location");

        locationComboboxLocationSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{}));
        locationComboboxLocationSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locationComboboxLocationSelectorActionPerformed(evt);
            }
        });

        locationLabelGraphicWidth.setText("Graphic width");

        locationLabelGraphicHeight.setText("Graphic height");

        locationButtonAddLocation.setText("Add location");
        locationButtonAddLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locationButtonAddLocationActionPerformed(evt);
            }
        });

        locationButtonRemoveCurrentLocation.setText("Remove current location");
        locationButtonRemoveCurrentLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locationButtonRemoveCurrentLocationActionPerformed(evt);
            }
        });

        locationButtonEditCurrentLocation.setText("Edit current location");
        locationButtonEditCurrentLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locationButtonEditCurrentLocationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LocationLayout = new javax.swing.GroupLayout(Location);
        Location.setLayout(LocationLayout);
        LocationLayout.setHorizontalGroup(
            LocationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LocationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(LocationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(locationLabelGraphicHeight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(locationLabelGraphicWidth, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(locationLabelCurrentLocation, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(LocationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(locationButtonEditCurrentLocation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(locationComboboxLocationSelector, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(locationButtonAddLocation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(locationButtonRemoveCurrentLocation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(153, Short.MAX_VALUE))
        );
        LocationLayout.setVerticalGroup(
            LocationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LocationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(LocationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(locationComboboxLocationSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(locationLabelCurrentLocation))
                .addGap(18, 18, 18)
                .addGroup(LocationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(locationLabelGraphicWidth)
                    .addComponent(locationButtonAddLocation))
                .addGap(18, 18, 18)
                .addGroup(LocationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(locationLabelGraphicHeight)
                    .addComponent(locationButtonRemoveCurrentLocation))
                .addGap(18, 18, 18)
                .addComponent(locationButtonEditCurrentLocation)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        Tabs.addTab("Location", Location);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Footer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(Tabs)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(Tabs, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Footer))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void buttonSelectTxtFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSelectTxtFileActionPerformed
      JFileChooser fileChooser = new JFileChooser();
      FileNameExtensionFilter filter = new FileNameExtensionFilter("Text files", "txt");
      fileChooser.setCurrentDirectory(new File("C:\\Users\\wdwyer\\Desktop"));
      fileChooser.setAcceptAllFileFilterUsed(false);
      fileChooser.setFileFilter(filter);
      
      if(this.bandInfoFile != null)
        fileChooser.setCurrentDirectory(this.bandInfoFile);
      
      if(fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
        bandInfoFile = new File(fileChooser.getSelectedFile().getAbsolutePath());
        this.labelSelectedTxtFile.setText("Selected .txt file: " + this.bandInfoFile.getName());
      }
      
    }//GEN-LAST:event_buttonSelectTxtFileActionPerformed

    private void buttonSaveGraphicsToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveGraphicsToActionPerformed
      JFileChooser chooser = new JFileChooser();
      
      chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
      chooser.setAcceptAllFileFilterUsed(false);
      if(this.graphicsSaveLocation != null)
          chooser.setCurrentDirectory(this.graphicsSaveLocation);
      
      if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
        this.graphicsSaveLocation = chooser.getSelectedFile();
        this.labelSaveGraphicsTo.setText("Save graphics to: \"" + this.graphicsSaveLocation.getName() + "\" folder");
      }
    }//GEN-LAST:event_buttonSaveGraphicsToActionPerformed

    private void buttonImportGraphicsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonImportGraphicsActionPerformed
      if(this.generator == null) {
        JOptionPane.showMessageDialog(null, "Please generate graphics before importing them.", "Import Graphics Error", 2);
      } else if (this.generator.getNumBands() == -1) {
        JOptionPane.showMessageDialog(null, "Please allow all graphics to be generated before importing them.", "Import Graphics Error", 2);
      } else {
        try {
          if (!isProcessRunning("Ignite_x64.exe")){
            JOptionPane.showMessageDialog(null, "Please open Ignite before importing graphics.", "Import Graphics Error", 2);
          } else {
            try {
            //TODO: update this
              new RobotOperator(this.generator.getNumBands());
              /*try {
                this.bringIgniteToFront();
              } catch (InterruptedException e) {
                JOptionPane.showMessageDialog(null, "There was an error running the automatic importer.", "Import Graphics Error", 2);
              }*/
            } catch (AWTException e) {
              JOptionPane.showMessageDialog(null, "There was an error running the automatic importer.", "Import Graphics Error", 2);
            }
          }
        } catch (IOException e) {
          JOptionPane.showMessageDialog(null, "There was an error running the automatic importer.", "Import Graphics Error", 2);
        }
      }
    }//GEN-LAST:event_buttonImportGraphicsActionPerformed

    private void buttonGenerateGraphicsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerateGraphicsActionPerformed
      // double checking that a band file has been selected already
      if(this.bandInfoFile == null || !this.bandInfoFile.getName().substring(this.bandInfoFile.getName().length()-3).equals("txt")) {
        JOptionPane.showMessageDialog(null, "Please select a .txt file before generating graphics.", "Generate Graphics Error", 2);
      } else if (this.graphicsSaveLocation == null) {
        JOptionPane.showMessageDialog(null, "Please select a folder to save the generated graphics to before generating graphics.", "Generate Graphics Error", 2);
      } else {
        try {
          this.generator = new GraphicGenerator(this.locations.get(currentLocationIndex), this.bandInfoFile, this.graphicsSaveLocation);
        } catch (FileNotFoundException e) {
          System.out.print("for some reason, the txt file was not correct");
          e.printStackTrace();
        }
      }
    }//GEN-LAST:event_buttonGenerateGraphicsActionPerformed

    private void buttonUnlockDriveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUnlockDriveActionPerformed
      Desktop desktop = null;    
      try {
        if (Desktop.isDesktopSupported()) {
          desktop = Desktop.getDesktop();
        }
        desktop.open(new File("C:\\Users\\wbdwy\\Desktop\\Unlock.lnk"));
      } catch (IOException e) {      
        JOptionPane.showMessageDialog(null, "There was an error running WD Drive Unlock.", "Unlock Drive Error", 2);
      }
    }//GEN-LAST:event_buttonUnlockDriveActionPerformed

    private void buttonOpenIgniteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOpenIgniteActionPerformed
      Desktop desktop = null;    
      try {
        if (Desktop.isDesktopSupported()) {
          desktop = Desktop.getDesktop();
        }
        desktop.open(new File("C:\\Program Files\\Ignite12\\Ignite_x64.exe"));
      } catch (IOException e) {      
        JOptionPane.showMessageDialog(null, "There was an error opening Ignite.", "Open Ignite Error", 2);
      } catch (RuntimeException e) {
        JOptionPane.showMessageDialog(null, "There was an error opening Ignite.", "Open Ignite Error", 2);

      }
    }//GEN-LAST:event_buttonOpenIgniteActionPerformed

    private void locationButtonAddLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locationButtonAddLocationActionPerformed
      windowAddLocation.setLocation(this.getX() + 50, this.getY() + 50);
      windowAddLocation.setVisible(true);
    }//GEN-LAST:event_locationButtonAddLocationActionPerformed

    private void locationComboboxLocationSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locationComboboxLocationSelectorActionPerformed
        this.locationNewFindCurrentLocation();
        this.Footer.setText("Current location: " + this.locations.get(this.currentLocationIndex).getName() + "     ");
        locationLabelGraphicWidth.setText("Width: " + this.locations.get(this.currentLocationIndex).getGraphicWidth());
        locationLabelGraphicHeight.setText("Height: " + this.locations.get(this.currentLocationIndex).getGraphicHeight());

    }//GEN-LAST:event_locationComboboxLocationSelectorActionPerformed

    private void addLocationButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLocationButtonSaveActionPerformed
        if(this.locationNameTaken(addLocationTextFieldName.getText())) {
            JOptionPane.showMessageDialog(null, "This name is already being used. Please enter a new name.", "Add Error", 2);
        } else {    
            try {
                this.locations.add(new Location(addLocationTextFieldName.getText(), Integer.parseInt(addLocationTextFieldGraphicWidth.getText()), Integer.parseInt(addLocationTextFieldGraphicHeight.getText())));
                //this.currentLocationIndex = this.locationsNew.size()-1;
                this.locationComboboxLocationSelector.addItem(this.locations.get(this.locations.size()-1).getName());
                addLocationTextFieldName.setText("Name");
                addLocationTextFieldGraphicWidth.setText("100");
                addLocationTextFieldGraphicHeight.setText("100");
                windowAddLocation.dispose();
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Please enter numeric values for width and height.", "Add error", 2);
            }
        }
    }//GEN-LAST:event_addLocationButtonSaveActionPerformed

    private void locationButtonEditCurrentLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locationButtonEditCurrentLocationActionPerformed
        windowEditLocation.setLocation(this.getX() + 50, this.getY() + 50);
        windowEditLocation.setVisible(true);
        editLocationTextFieldName.setText(this.locations.get(this.currentLocationIndex).getName());
        editLocationTextFieldGraphicWidth.setText(Integer.toString(this.locations.get(this.currentLocationIndex).getGraphicWidth()));
        editLocationTextFieldGraphicHeight.setText(Integer.toString(this.locations.get(this.currentLocationIndex).getGraphicHeight()));
    }//GEN-LAST:event_locationButtonEditCurrentLocationActionPerformed

    private void locationButtonRemoveCurrentLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locationButtonRemoveCurrentLocationActionPerformed
        if(this.locations.size() == 1) {
            JOptionPane.showMessageDialog(null, "Please add another location before removing this one.", "Remove Error", 2);
        } else {
            this.locations.remove(this.currentLocationIndex);
            this.updateCombobox();
        }
    }//GEN-LAST:event_locationButtonRemoveCurrentLocationActionPerformed

    private void editLocationTextFieldGraphicWidthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editLocationTextFieldGraphicWidthActionPerformed
    }//GEN-LAST:event_editLocationTextFieldGraphicWidthActionPerformed

    private void editLocationTextFieldGraphicHeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editLocationTextFieldGraphicHeightActionPerformed
    }//GEN-LAST:event_editLocationTextFieldGraphicHeightActionPerformed

    private void addLocationTextFieldGraphicWidthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLocationTextFieldGraphicWidthActionPerformed
    }//GEN-LAST:event_addLocationTextFieldGraphicWidthActionPerformed

    private void addLocationTextFieldGraphicHeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLocationTextFieldGraphicHeightActionPerformed
    }//GEN-LAST:event_addLocationTextFieldGraphicHeightActionPerformed

    private void editLocationButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editLocationButtonSaveActionPerformed
         try {
            this.locations.get(this.currentLocationIndex).setName(editLocationTextFieldName.getText());
            this.locations.get(this.currentLocationIndex).setGraphicWidth(Integer.parseInt(editLocationTextFieldGraphicWidth.getText()));
            this.locations.get(this.currentLocationIndex).setGraphicHeight(Integer.parseInt(editLocationTextFieldGraphicHeight.getText()));
            int temp = this.currentLocationIndex;
            this.updateCombobox();
            this.currentLocationIndex = temp;
            this.locationComboboxLocationSelector.setSelectedIndex(temp);
            
            editLocationTextFieldName.setText("Name");
            editLocationTextFieldGraphicWidth.setText("100");
            editLocationTextFieldGraphicHeight.setText("100");                
            
            windowEditLocation.dispose();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please enter numeric values for width and height", "Add error", 2);
        }
    }//GEN-LAST:event_editLocationButtonSaveActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.serializeLocationInformation();
    }//GEN-LAST:event_formWindowClosing

    private void buttonOpenTxtFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOpenTxtFileActionPerformed
        if(this.bandInfoFile == null) 
            JOptionPane.showMessageDialog(null, "Please select a .txt file to open.", "Open .txt Error", 2);
        else {
            Desktop desktop = null;    
            try {
              if (Desktop.isDesktopSupported()) {
                desktop = Desktop.getDesktop();
              }
              desktop.open(this.bandInfoFile);
            } catch (IOException e) {      
              JOptionPane.showMessageDialog(null, "There was an error opening the .txt file.", "Open .txt Error", 2);
            }
        }

    }//GEN-LAST:event_buttonOpenTxtFileActionPerformed

    private void addLocationTextFieldNameActionPerformed(java.awt.event.ActionEvent evt) {
    }
    
    private void editLocationTextFieldNameActionPerformed(java.awt.event.ActionEvent evt) {
    }
    
    /**
     * When the program starts up, this retrieves all the serialized information about previously
     * added Locations so that users do not need to re-enter Locations every time
     */
    private void retrieveLocationInformation() {        
        try {
            FileInputStream fileIn = new FileInputStream("Resources\\locationInformation.ser");
            ObjectInputStream in = new ObjectInputStream(fileIn);
            
            int count = (Integer) in.readObject();
            
            for(int i = 0; i < count; i++) {
                locations.add((Location) in.readObject());
            }
            
            this.bandInfoFile = (File) in.readObject();
            this.graphicsSaveLocation = (File) in.readObject();
            
            in.close();
            fileIn.close();
        } catch (FileNotFoundException ex) {
            locations.add(new Location("Default", 100, 100));
            //ex.printStackTrace();
        } catch (IOException ex) {
            //ex.printStackTrace();
        } catch (ClassNotFoundException ex) {
            //ex.printStackTrace();
        }
    }
    
    /**
     * When the program is done running, this saves all the information about Locations so that it can
     * be retrieved the next time the program is being used
     */
    private void serializeLocationInformation() {        
        try {
            FileOutputStream fileOut = new FileOutputStream("Resources\\locationInformation.ser");
            ObjectOutputStream out = new ObjectOutputStream(fileOut);
            
            out.writeObject(this.locations.size());
            
            for(Location location : this.locations)
                out.writeObject(location);
            
            out.writeObject(bandInfoFile);
            out.writeObject(graphicsSaveLocation);
            
            out.close();
            fileOut.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    /**
     * After a location has been removed or edited, this method updates the combobox with the new names of the remaining Locations
     */
    private void updateCombobox() {
        this.currentLocationIndex = 0;
        this.locationComboboxLocationSelector.removeAllItems();
        for(Location l : this.locations) {
            this.locationComboboxLocationSelector.addItem(l.getName());
        }
    }
    
    /**
     * Determines if the location name (passed as parameter) is already being used
     * 
     * @param name - the name to check if a location already has that name
     * @return true if the location name is taken, and false otherwise
     */
    private boolean locationNameTaken(String name) {
        for(Location l : this.locations)
            if(l.getName().equals(name)) return true;
        
        return false;
    }
    
    /**
     * Finds the current location by finding the Location object in the locationsNew array that
     * has the same name as the currently selected name in the locationsNewComboboxLocationSelector
     */
    private void locationNewFindCurrentLocation() {
        for(int i = 0; i < this.locations.size(); i++) {
            if(locations.get(i).getName().equals(locationComboboxLocationSelector.getSelectedItem())) {
                this.currentLocationIndex = i;
                return;
            }
        }
    }
    
    /**
     * 
     * @param processName - the process of interest to see if it's running or not yet
     * @return true if the process is open (according to Task Manager) or false otherwise
     * @throws IOException - honestly, not too sure what this does
     */
    public boolean isProcessRunning(String processName) throws IOException{
      String line;
      String pidInfo ="";

      Process p =Runtime.getRuntime().exec(System.getenv("windir") +"\\system32\\"+"tasklist.exe");

      BufferedReader input =  new BufferedReader(new InputStreamReader(p.getInputStream()));

      while ((line = input.readLine()) != null) {
          pidInfo+=line; 
      }

      input.close();

      if(pidInfo.contains(processName))
          return true;
      return false;
    }
    
    
    public void bringIgniteToFront() throws IOException, InterruptedException {
      String taskPath = "C:\\Program Files\\Ignite12\\Ignite_x64.exe";
      Desktop.getDesktop().open(new File(taskPath));
      Thread.sleep(1000); // Wait for the window to open
      HWND hwnd = User32.INSTANCE.FindWindow(null, "Ignite_x64.exe");
      User32.INSTANCE.SetForegroundWindow(hwnd);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
      try {
        UIManager.setLookAndFeel(new FlatMacDarkLaf());
      } catch (UnsupportedLookAndFeelException ex) {
        Logger.getLogger(GuiJFrame2.class.getName()).log(Level.SEVERE, null, ex);
      }
      
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GuiJFrame2().setVisible(true);
            }
        });
    }
    
    private ArrayList<Location> locations; // the Locations that graphics can be made for
    private int currentLocationIndex; // the postive integer number that is current
    private File bandInfoFile; // the .txt file that has the band information in it
    private File graphicsSaveLocation; // the directory to save generated graphcis to
    private GraphicGenerator generator; // the object that generates the graphics
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Footer;
    private javax.swing.JPanel Location;
    private javax.swing.JPanel Main;
    private javax.swing.JTabbedPane Tabs;
    private javax.swing.JButton addLocationButtonSave;
    private javax.swing.JLabel addLocationLabelGraphicHeight;
    private javax.swing.JLabel addLocationLabelGraphicWidth;
    private javax.swing.JTextField addLocationTextFieldGraphicHeight;
    private javax.swing.JTextField addLocationTextFieldGraphicWidth;
    private javax.swing.JTextField addLocationTextFieldName;
    private javax.swing.JButton buttonGenerateGraphics;
    private javax.swing.JButton buttonImportGraphics;
    private javax.swing.JButton buttonOpenIgnite;
    private javax.swing.JButton buttonOpenTxtFile;
    private javax.swing.JButton buttonSaveGraphicsTo;
    private javax.swing.JButton buttonSelectTxtFile;
    private javax.swing.JButton buttonUnlockDrive;
    private javax.swing.JButton editLocationButtonSave;
    private javax.swing.JLabel editLocationLabeWidth;
    private javax.swing.JLabel editLocationLabelHeight;
    private javax.swing.JTextField editLocationTextFieldGraphicHeight;
    private javax.swing.JTextField editLocationTextFieldGraphicWidth;
    private javax.swing.JTextField editLocationTextFieldName;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel labelSaveGraphicsTo;
    private javax.swing.JLabel labelSelectedTxtFile;
    private javax.swing.JButton locationButtonAddLocation;
    private javax.swing.JButton locationButtonEditCurrentLocation;
    private javax.swing.JButton locationButtonRemoveCurrentLocation;
    private javax.swing.JComboBox<String> locationComboboxLocationSelector;
    private javax.swing.JLabel locationLabelCurrentLocation;
    private javax.swing.JLabel locationLabelGraphicHeight;
    private javax.swing.JLabel locationLabelGraphicWidth;
    private javax.swing.JSeparator seperatorHorizontal;
    private javax.swing.JSeparator seperatorVertical;
    private javax.swing.JSeparator seperatorVertical1;
    private javax.swing.JFrame windowAddLocation;
    private javax.swing.JFrame windowEditLocation;
    // End of variables declaration//GEN-END:variables
}
